import java.util.Scanner;
public class ArbolesBinarios {
//clase nodo            
// Nodo como clase estática interna
    static class Nodo {
        int valor;
        Nodo izquierda, derecha;

        public Nodo(int valor) {
            this.valor = valor;
            izquierda = derecha = null;
        }
    }

    // Clase Arbol binario como clase estática interna
    static class ArbolBinario {
        Nodo raiz;

        // Metodo Insertar un nuevo valor en el arbol
        public void insertar(int valor) {
            raiz = insertarRec(raiz, valor);
        }

        private Nodo insertarRec(Nodo raiz, int valor) {
            if (raiz == null) {
                raiz = new Nodo(valor);
                return raiz;
            }

            if (valor < raiz.valor)
                raiz.izquierda = insertarRec(raiz.izquierda, valor);
            else if (valor > raiz.valor)
                raiz.derecha = insertarRec(raiz.derecha, valor);

            return raiz;
        }

        // Metodo Buscar un valor en el arbol
        public boolean buscar(int valor) {
            return buscarRec(raiz, valor);
        }

        private boolean buscarRec(Nodo raiz, int valor) {
            if (raiz == null)
                return false;
            if (raiz.valor == valor)
                return true;
            return valor < raiz.valor
                    ? buscarRec(raiz.izquierda, valor)
                    : buscarRec(raiz.derecha, valor);
        }

        // Metodos Recorridos del arbol
        public void inorden() {
            System.out.print("Recorrido Inorden: ");
            inordenRec(raiz);
            System.out.println();
        }

        private void inordenRec(Nodo raiz) {
            if (raiz != null) {
                inordenRec(raiz.izquierda);
                System.out.print(raiz.valor + " ");
                inordenRec(raiz.derecha);
            }
        }

        public void preorden() {
            System.out.print("Recorrido Preorden: ");
            preordenRec(raiz);
            System.out.println();
        }

        private void preordenRec(Nodo raiz) {
            if (raiz != null) {
                System.out.print(raiz.valor + " ");
                preordenRec(raiz.izquierda);
                preordenRec(raiz.derecha);
            }
        }

        public void postorden() {
            System.out.print("Recorrido Postorden: ");
            postordenRec(raiz);
            System.out.println();
        }

        private void postordenRec(Nodo raiz) {
            if (raiz != null) {
                postordenRec(raiz.izquierda);
                postordenRec(raiz.derecha);
                System.out.print(raiz.valor + " ");
            }
        }
    }

    // Metodo Main
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArbolBinario arbol = new ArbolBinario();

        System.out.println("=== Arbol Binario de Busqueda ===");
        System.out.println("Ingresa los valores separados por espacio (ejemplo: 8 3 10 1 6 14 4 7 13):");
        String linea = sc.nextLine().trim();

        if (!linea.isEmpty()) {
            String[] valores = linea.split("\\s+");
            for (String v : valores) {
                try {
                    arbol.insertar(Integer.parseInt(v));
                } catch (NumberFormatException e) {
                    System.out.println("Valor invalido ignorado: " + v);
                }
            }

            System.out.println("\n--- Recorridos ---");
            arbol.inorden();
            arbol.preorden();
            arbol.postorden();
        } else {
            System.out.println("No ingresaste valores para insertar.");
        }

        System.out.print("\nIngrese un valor para buscar: ");
        if (sc.hasNextInt()) {
            int valorBuscar = sc.nextInt();
            if (arbol.buscar(valorBuscar))
                System.out.println("El valor " + valorBuscar + " SI se encuentra en el arbol.");
            else
                System.out.println("El valor " + valorBuscar + " NO se encuentra en el arbol.");
        } else {
            System.out.println("Entrada invalida para busqueda.");
        }

        sc.close();
    }
}
